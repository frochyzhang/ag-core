@startuml
namespace ag_conf {
    class AbstractEnvironment << (S,Aquamarine) >> {
        + PropertySources *MutablePropertySources
        + PropertyResolver IConfigurablePeopertyResolver

        + ContainsProperty(key string) bool
        + GetProperty(key string) string
        + GetPropertyDefault(key string, defaultValue string) string
        + GetRequiredProperty(key string) (string, error)
        + ResolvePlaceholders(text string) string
        + ResolveRequiredPlaceholders(text string) (string, error)
        + GetDefaultProfiles() []string
        + SetPlaceholdPrefix(placeholderPrefic string) 
        + SetPlaceholdSuffix(placeholderSuffix string) 
        + SetValueSeparator(valueSeparator string) 
        + SetIgnoreUnresolvableNestedPlaceholders(ignoreUnresolvableNestedPlaceholders bool) 
        + SetRequiredProperties(requiredProperties ...string) 
        + ValidateRequiredProperties() error
        + GetPropertySources() *MutablePropertySources
        + Merge(parent IConfigurableEnvironment) 
        + GetSystemProperties() <font color=blue>map</font>[string]any
        + GetSystemEnvironment() <font color=blue>map</font>[string]any

    }
    class AbstractPropertyResolver << (S,Aquamarine) >> {
        + PlaceholderPrefix string
        + PlaceholderSuffix string
        + ValueSeparator string
        + IgnoreUnresolvableNestedPlaceholders bool
        + RequiredProperties []string
        + GetProperty <font color=blue>func</font>(string) string

        + ContainsProperty(key string) bool
        + GetPropertyDefault(key string, defaultValue string) string
        + GetRequiredProperty(key string) (string, error)
        + ResolvePlaceholders(text string) string
        + ResolveRequiredPlaceholders(text string) (string, error)
        + SetPlaceholdPrefix(placeholderPrefic string) 
        + SetPlaceholdSuffix(placeholderSuffix string) 
        + SetValueSeparator(valueSeparator string) 
        + SetIgnoreUnresolvableNestedPlaceholders(ignoreUnresolvableNestedPlaceholders bool) 
        + SetRequiredProperties(requiredProperties ...string) 
        + ValidateRequiredProperties() error

    }
    interface IAbstractEnvironment  {
        - customizePropertySources(ps *MutablePropertySources) 

    }
    interface IConfigurableEnvironment  {
        + GetPropertySources() *MutablePropertySources
        + Merge(parent IConfigurableEnvironment) 
        + GetSystemProperties() <font color=blue>map</font>[string]any
        + GetSystemEnvironment() <font color=blue>map</font>[string]any

    }
    interface IConfigurablePeopertyResolver  {
        + SetPlaceholdPrefix(placeholderPrefic string) 
        + SetPlaceholdSuffix(placeholderSuffix string) 
        + SetValueSeparator(valueSeparator string) 
        + SetIgnoreUnresolvableNestedPlaceholders(ignoreUnresolvableNestedPlaceholders bool) 
        + SetRequiredProperties(requiredProperties ...string) 
        + ValidateRequiredProperties() error

    }
    interface IEnvironment  {
        + GetDefaultProfiles() []string

    }
    interface IPropertyResolver  {
        + ContainsProperty(key string) bool
        + GetProperty(key string) string
        + GetPropertyDefault(key string, defaultValue string) string
        + GetRequiredProperty(key string) (string, error)
        + ResolvePlaceholders(text string) string
        + ResolveRequiredPlaceholders(text string) (string, error)

    }
    interface IPropertySource  {
        + GetName() string
        + EqualsName(psname string) bool
        + GetSource() <font color=blue>map</font>[string]any
        + GetProperty(key string) any
        + ContainsProperty(key string) bool
        + GetPropertyNames() []string

    }
    interface IPropertySources  {
        + Get(name string) IPropertySource
        + Contains(name string) bool
        + GetPropertySources() []IPropertySource
        + RangePropertySourceHandler( <font color=blue>func</font>(IPropertySource) (bool, error)) error

    }
    class MapPropertySource << (S,Aquamarine) >> {
        + Source <font color=blue>map</font>[string]any

        + GetSource() <font color=blue>map</font>[string]any
        + GetProperty(key string) any
        + ContainsProperty(key string) bool
        + GetPropertyNames() []string

    }
    class MutablePropertySources << (S,Aquamarine) >> {
        - lock sync.Mutex
        - propertySourceList *

        - removeIfPresent(toDelName string) 
        - indexOfName(name string) int

        + Get(name string) IPropertySource
        + Contains(name string) bool
        + GetPropertySources() []IPropertySource
        + RangePropertySourceHandler(handler <font color=blue>func</font>(IPropertySource) (bool, error)) error
        + AddFirst(ps IPropertySource) 
        + AddLast(ps IPropertySource) 
        + AddBefore(name string, ps IPropertySource) error
        + AddAfter(name string, ps IPropertySource) error
        + Remove(name string) 
        + Replace(name string, ps IPropertySource) 

    }
    class NacosPropertySource << (S,Aquamarine) >> {
    }
    class NamedPropertySource << (S,Aquamarine) >> {
        + Name string

        + GetName() string
        + EqualsName(psname string) bool

    }
    class PropertiesPropertySource << (S,Aquamarine) >> {
        - lock sync.Mutex

        + GetPropertyNames() []string

    }
    class PropertySourcesPropertyResolver << (S,Aquamarine) >> {
        + PropertySources IPropertySources

        + GetProperty(key string) string
        + ContainsProperty(key string) bool

    }
    class StandardEnvironment << (S,Aquamarine) >> {
        - customizePropertySources(ps *MutablePropertySources) 

    }
    class SystemEnvironmentPropertySource << (S,Aquamarine) >> {
    }
}
"ag_conf.IConfigurableEnvironment" *-- "ag_conf.IAbstractEnvironment"
"ag_conf.IConfigurablePeopertyResolver" *-- "ag_conf.IConfigurableEnvironment"
"ag_conf.IEnvironment" *-- "ag_conf.IConfigurableEnvironment"
"ag_conf.IPropertyResolver" *-- "ag_conf.IConfigurablePeopertyResolver"
"ag_conf.IPropertyResolver" *-- "ag_conf.IEnvironment"
"ag_conf.NamedPropertySource" *-- "ag_conf.MapPropertySource"
"ag_conf.MapPropertySource" *-- "ag_conf.NacosPropertySource"
"ag_conf.MapPropertySource" *-- "ag_conf.PropertiesPropertySource"
"ag_conf.AbstractPropertyResolver" *-- "ag_conf.PropertySourcesPropertyResolver"
"ag_conf.AbstractEnvironment" *-- "ag_conf.StandardEnvironment"
"ag_conf.MapPropertySource" *-- "ag_conf.SystemEnvironmentPropertySource"

"ag_conf.IConfigurableEnvironment" <|-- "ag_conf.AbstractEnvironment"
"ag_conf.IConfigurablePeopertyResolver" <|-- "ag_conf.AbstractEnvironment"
"ag_conf.IEnvironment" <|-- "ag_conf.AbstractEnvironment"
"ag_conf.IPropertyResolver" <|-- "ag_conf.AbstractEnvironment"
"ag_conf.IConfigurablePeopertyResolver" <|-- "ag_conf.AbstractPropertyResolver"
"ag_conf.IPropertySources" <|-- "ag_conf.MutablePropertySources"
"ag_conf.IAbstractEnvironment" <|-- "ag_conf.StandardEnvironment"

@enduml
