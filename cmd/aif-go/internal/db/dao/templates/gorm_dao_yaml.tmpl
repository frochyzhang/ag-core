// Code generated by aic-ent, DO NOT EDIT
// Code generated by aic-ent, DO NOT EDIT
// Code generated by aic-ent, DO NOT EDIT

package dao
import (
    "context"
    "{{.ModuleName}}/internal/data/model"
    db "github.com/frochyzhang/ag-core/ag/ag_db/gormdb"
)

type I{{.ObjectName}}Dao interface {
    InsertOne(ctx context.Context, arg *model.{{.ObjectName}}) (int64, error)
    {{.PrimaryRIndex.IndexName}}(ctx context.Context, {{.PrimaryRIndex.HashParameters}}) (*model.{{.ObjectName}}, error)
    UpdateByPrimaryKey(ctx context.Context, arg *model.{{.ObjectName}}) (int64, error)
    UpdateByPriIgnoreNullCols(ctx context.Context, arg *model.{{.ObjectName}}) (int64, error)
    {{.PrimaryDIndex.IndexName}}(ctx context.Context, {{.PrimaryDIndex.HashParameters}}) (int64, error)
    {{- range .GeneralIndexList}}
    FindBy{{ .MethodName }}(ctx context.Context, {{.HashParamters}}) ([]model.{{$.ObjectName}}, error)
    {{- end}}
    {{- range .UniqueIndexList}}
    FindBy{{ .MethodName }}(ctx context.Context, {{.HashParamters}}) (*model.{{$.ObjectName}}, error)
    {{- end}}
    {{- range .RNamingSqlList}}
    {{.MethodName}}(ctx context.Context, arg *model.{{.MethodName}}Arg) ([]*model.{{$.ObjectName}},error)
    {{- end}}

    {{- range .CUDNamingSqlList}}
    {{.MethodName}}(ctx context.Context, arg *model.{{.MethodName}}Arg) (int64, error)
    {{- end}}
}

type {{.ObjectName}}Dao struct {
    *db.Repository
}

// New{{.ObjectName}}Dao get dao instance
func New{{.ObjectName}}Dao(repository *db.Repository) I{{.ObjectName}}Dao {
    return &{{.ObjectName}}Dao{
        Repository: repository,
    }
}

func (dao *{{.ObjectName}}Dao) InsertOne(ctx context.Context,arg *model.{{.ObjectName}})(int64,error) {
    result := dao.DB(ctx).Create(arg)
    return result.RowsAffected, result.Error
}

func (dao *{{.ObjectName}}Dao) {{.PrimaryRIndex.IndexName}}(ctx context.Context, {{.PrimaryRIndex.HashParameters}}) (*model.{{.ObjectName}},error) {
   findRes := &model.{{.ObjectName}}{}
   result := dao.DB(ctx){{- range .PrimaryRIndex.BindParamList}}.Where("{{.DbColName}}",{{.GoColName}}){{- end}}.Find(findRes)
   return findRes,result.Error
}

func (dao *{{.ObjectName}}Dao) UpdateByPrimaryKey(ctx context.Context,arg *model.{{.ObjectName}})(int64,error){
      result := dao.DB(ctx).Save(arg)
      return result.RowsAffected, result.Error
}

func (dao *{{.ObjectName}}Dao) UpdateByPriIgnoreNullCols(ctx context.Context,arg *model.{{.ObjectName}})(int64,error){
      result := dao.DB(ctx).Model(arg).Updates(arg)
      return result.RowsAffected, result.Error
}

func (dao *{{.ObjectName}}Dao) {{.PrimaryDIndex.IndexName}}(ctx context.Context, {{.PrimaryDIndex.HashParameters}})(int64,error){
      result := dao.DB(ctx){{- range .PrimaryDIndex.BindParamList}}.Where("{{.DbColName}}",{{.GoColName}}){{- end}}.Delete(&model.{{.ObjectName}}{})
      return result.RowsAffected, result.Error
}

{{- range .GeneralIndexList}}

func (dao *{{$.ObjectName}}Dao) FindBy{{ .MethodName }}(ctx context.Context,{{.HashParamters}})([]model.{{$.ObjectName}},error){
   var list []model.{{$.ObjectName}}
   result := dao.DB(ctx){{- range .BindParamList}}.Where("{{.DbColName}}", {{ .GoColName }}){{- end}}.Find(&list)
   return list,result.Error
}
{{- end}}

{{- range .UniqueIndexList}}
func (dao *{{$.ObjectName}}Dao) FindBy{{ .MethodName }}(ctx context.Context,{{.HashParamters}})(*model.{{$.ObjectName}},error){
   findRes :=&model.{{$.ObjectName}}{}
   result := dao.DB(ctx){{- range .BindParamList}}.Where("{{.DbColName}}",{{.GoColName }}){{- end}}.Find(findRes)
   return findRes,result.Error
}
{{- end}}

{{- range .RNamingSqlList}}
func (dao *{{$.ObjectName}}Dao) {{.MethodName}} (ctx context.Context,arg *model.{{.MethodName}}Arg) ([]*model.{{$.ObjectName}},error) {
    var list []*model.{{$.ObjectName}}
    result := dao.DB(ctx).Raw("{{.NamingSql}}",arg).Find(list)
    return list, result.Error
}
{{- end}}

{{- range .CUDNamingSqlList}}
func (dao *{{$.ObjectName}}Dao) {{.MethodName}} (ctx context.Context,arg *model.{{.MethodName}}Arg) (int64,error) {
       var list []model.{{$.ObjectName}}
       result := dao.DB(ctx).Exec("{{.NamingSql}}",arg)
       return result.RowsAffected, result.Error
}
{{- end}}